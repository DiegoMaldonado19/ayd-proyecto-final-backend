name: CI/CD Pipeline Backend

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: parkcontrol-backend
  DOCKER_USERNAME: djmaldonado19
  SERVER_IP: 172.190.44.206
  SERVER_PATH: /home/azureuser/repos/ayd-backend

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Run unit tests with JaCoCo
        run: mvn clean test jacoco:report -B

      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: badges
          generate-branches-badge: true
          generate-summary: true

      - name: Log coverage percentage
        run: |
          echo "Coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "Branches = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} .
          echo "Built Docker image for branch: ${{ github.ref_name }}"

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
          docker tag ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          echo "Pushed images to Docker Hub"

      - name: Deploy to server
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to server ${{ env.SERVER_IP }}"

          sudo apt-get update
          sudo apt-get install -y sshpass

          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ env.SERVER_IP }} "
            cd ${{ env.SERVER_PATH }} &&
            git pull origin main &&
            
            echo 'SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/parkcontrol_db' > .env &&
            echo 'SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }}' >> .env &&
            echo 'SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env &&
            echo 'SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.mariadb.jdbc.Driver' >> .env &&
            echo 'MARIADB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}' >> .env &&
            echo 'MARIADB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env &&
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env &&
            echo 'JWT_EXPIRATION=3600000' >> .env &&
            echo 'JWT_REFRESH_EXPIRATION=86400000' >> .env &&
            echo 'MAIL_HOST=smtp.gmail.com' >> .env &&
            echo 'MAIL_PORT=587' >> .env &&
            echo 'MAIL_USERNAME=dmaldonado1920@gmail.com' >> .env &&
            echo 'MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}' >> .env &&
            echo 'FILE_UPLOAD_PATH=/app/uploads' >> .env &&
            echo 'LOG_LEVEL_APP=INFO' >> .env &&
            echo 'LOG_LEVEL_SECURITY=WARN' >> .env &&
            echo 'LOG_LEVEL_WEB=WARN' >> .env &&
            echo 'LOG_LEVEL_SQL=WARN' >> .env &&
            echo 'LOG_LEVEL_HIBERNATE=WARN' >> .env &&
            echo 'LOG_FILE_NAME=/app/logs/parkcontrol-application.log' >> .env &&
            echo 'VERSION=latest' >> .env &&
            
            # Deploy
            docker-compose pull &&
            docker-compose up -d &&

            sleep 20 &&
            docker-compose ps
          "
          echo "Deployment completed"

      - name: Cleanup
        if: always()
        run: |
          docker system prune -f || true
